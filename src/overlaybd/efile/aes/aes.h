#if defined (__cplusplus)
extern "C" {
#endif

#ifndef AES_H_2983827168210
#define AES_H_2983827168210

#include <stdint.h>
#include <stdlib.h>
#include <stdbool.h>
#include <sys/types.h>
#include <unistd.h>

typedef unsigned char Cpa8U;
typedef unsigned long int Cpa32U;
typedef void * KeyHandle;
typedef void * CpaInstanceHandle;

/* Unsigned 64 bit integer */
typedef uint64_t i64_t;

/* Unsigned 32 bit integer */
//typedef uint32_t i32_t;

/* Unsigned 16 bit integer */
typedef uint16_t i16_t;

/* Unsigned 8 bit integer */
typedef uint8_t i8_t;

typedef struct _AesKey {
    char *skey;
} AesKey;

typedef struct _CpaFlatBuffer {
    Cpa32U dataLenInBytes;
    /**< Data length specified in bytes.
     * When used as an input parameter to a function, the length specifies
     * the current length of the buffer.
     * When used as an output parameter to a function, the length passed in
     * specifies the maximum length of the buffer on return (i.e. the allocated
     * length).  The implementation will not write past this length.  On return,
     * the length is always unchanged. */
  Cpa8U *pData;
    /**< The data pointer is a virtual address, however the actual data pointed
     * to is required to be in contiguous physical memory unless the field
     requiresPhysicallyContiguousMemory in CpaInstanceInfo2 is false. */
} CpaFlatBuffer;

typedef struct _CpaCyAesPublicKey {
    CpaFlatBuffer modulusN;
    /**< The modulus (n).
     * For key generation operations, the client MUST allocate the memory
     * for this parameter; its value is generated.
     * For encrypt operations this parameter is an input. */
    CpaFlatBuffer publicExponentE;
    /**< The public exponent (e).
     * For key generation operations, this field is unused.  It is NOT
     * generated by the interface; it is the responsibility of the client
     * to set this to the same value as the corresponding parameter on
     * the CpaCyRsaKeyGenOpData structure before using the key for
     * encryption.
     * For encrypt operations this parameter is an input. */
} CpaCyAesPublicKey;

typedef enum CpaCyKptWrappingKeyType_t {
    CPA_CY_KPT_WRAPPING_KEY_TYPE_AES256_GCM = 0
} CpaCyKptWrappingKeyType;

typedef struct CpaCyLoadKey_t {
    CpaFlatBuffer             eSWK;
    /**< Encrypted SWK */
    CpaCyKptWrappingKeyType   wrappingAlgorithm;
    /**< Symmetric wrapping algorithm*/
} CpaCyLoadKey;

int AES_cryptBound(int isize);

/**
 * hk: key handle, we can get key by this key handle
 * plain: plain text
 * cipher: cipher text
 * plen: plain text len
 * clen: cipher text len
 */
int AES_encrypt(KeyHandle hk, const unsigned char *plain, unsigned char *cipher, int plen, int clen);

/**
 * hk: key handle, we can get key by this key handle
 * cipher: cipher text
 * plain: plain text
 * clen: cipher text len
 * plen: plain text len
 */
int AES_decrypt(KeyHandle hk, const unsigned char *cipher, unsigned char *plain, int clen, int plen);

int AES_generateKey(AesKey *aeskey);

int AES_loadKey(CpaCyAesPublicKey publicKey, AesKey *aeskey, KeyHandle *hk);

#endif /* AES_H_2983827168210 */


#if defined (__cplusplus)
}
#endif